// Code generated by capnpc-go. DO NOT EDIT.

package basinprovider

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	capnp2 "github.com/tablelandnetwork/basin-cli/pkg/capnp"
)

type Publications capnp.Client

// Publications_TypeID is the unique identifier for the type Publications.
const Publications_TypeID = 0xfddc20d968f417dd

func (c Publications) Create(ctx context.Context, params func(Publications_create_Params) error) (Publications_create_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfddc20d968f417dd,
			MethodID:      0,
			InterfaceName: "pkg/basinprovider/provider.capnp:Publications",
			MethodName:    "create",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Publications_create_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Publications_create_Results_Future{Future: ans.Future()}, release

}

func (c Publications) Push(ctx context.Context, params func(Publications_push_Params) error) (Publications_push_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfddc20d968f417dd,
			MethodID:      1,
			InterfaceName: "pkg/basinprovider/provider.capnp:Publications",
			MethodName:    "push",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Publications_push_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Publications_push_Results_Future{Future: ans.Future()}, release

}

func (c Publications) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Publications) String() string {
	return "Publications(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Publications) AddRef() Publications {
	return Publications(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Publications) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Publications) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Publications) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Publications) DecodeFromPtr(p capnp.Ptr) Publications {
	return Publications(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Publications) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Publications) IsSame(other Publications) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Publications) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Publications) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Publications_Server is a Publications with a local implementation.
type Publications_Server interface {
	Create(context.Context, Publications_create) error

	Push(context.Context, Publications_push) error
}

// Publications_NewServer creates a new Server from an implementation of Publications_Server.
func Publications_NewServer(s Publications_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Publications_Methods(nil, s), s, c)
}

// Publications_ServerToClient creates a new Client from an implementation of Publications_Server.
// The caller is responsible for calling Release on the returned Client.
func Publications_ServerToClient(s Publications_Server) Publications {
	return Publications(capnp.NewClient(Publications_NewServer(s)))
}

// Publications_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Publications_Methods(methods []server.Method, s Publications_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfddc20d968f417dd,
			MethodID:      0,
			InterfaceName: "pkg/basinprovider/provider.capnp:Publications",
			MethodName:    "create",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Create(ctx, Publications_create{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfddc20d968f417dd,
			MethodID:      1,
			InterfaceName: "pkg/basinprovider/provider.capnp:Publications",
			MethodName:    "push",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Push(ctx, Publications_push{call})
		},
	})

	return methods
}

// Publications_create holds the state for a server call to Publications.create.
// See server.Call for documentation.
type Publications_create struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Publications_create) Args() Publications_create_Params {
	return Publications_create_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Publications_create) AllocResults() (Publications_create_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Publications_create_Results(r), err
}

// Publications_push holds the state for a server call to Publications.push.
// See server.Call for documentation.
type Publications_push struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Publications_push) Args() Publications_push_Params {
	return Publications_push_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Publications_push) AllocResults() (Publications_push_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Publications_push_Results(r), err
}

// Publications_List is a list of Publications.
type Publications_List = capnp.CapList[Publications]

// NewPublications creates a new list of Publications.
func NewPublications_List(s *capnp.Segment, sz int32) (Publications_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Publications](l), err
}

type Publications_create_Params capnp.Struct

// Publications_create_Params_TypeID is the unique identifier for the type Publications_create_Params.
const Publications_create_Params_TypeID = 0x8986414763ed9fe4

func NewPublications_create_Params(s *capnp.Segment) (Publications_create_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Publications_create_Params(st), err
}

func NewRootPublications_create_Params(s *capnp.Segment) (Publications_create_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Publications_create_Params(st), err
}

func ReadRootPublications_create_Params(msg *capnp.Message) (Publications_create_Params, error) {
	root, err := msg.Root()
	return Publications_create_Params(root.Struct()), err
}

func (s Publications_create_Params) String() string {
	str, _ := text.Marshal(0x8986414763ed9fe4, capnp.Struct(s))
	return str
}

func (s Publications_create_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Publications_create_Params) DecodeFromPtr(p capnp.Ptr) Publications_create_Params {
	return Publications_create_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Publications_create_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Publications_create_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Publications_create_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Publications_create_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Publications_create_Params) Ns() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Publications_create_Params) HasNs() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Publications_create_Params) NsBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Publications_create_Params) SetNs(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Publications_create_Params) Table() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Publications_create_Params) HasTable() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Publications_create_Params) TableBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Publications_create_Params) SetTable(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Publications_create_Params) Schema() (capnp2.Schema, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp2.Schema(p.Struct()), err
}

func (s Publications_create_Params) HasSchema() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Publications_create_Params) SetSchema(v capnp2.Schema) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewSchema sets the schema field to a newly
// allocated capnp2.Schema struct, preferring placement in s's segment.
func (s Publications_create_Params) NewSchema() (capnp2.Schema, error) {
	ss, err := capnp2.NewSchema(capnp.Struct(s).Segment())
	if err != nil {
		return capnp2.Schema{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Publications_create_Params) Owner() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s Publications_create_Params) HasOwner() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Publications_create_Params) OwnerBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s Publications_create_Params) SetOwner(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

// Publications_create_Params_List is a list of Publications_create_Params.
type Publications_create_Params_List = capnp.StructList[Publications_create_Params]

// NewPublications_create_Params creates a new list of Publications_create_Params.
func NewPublications_create_Params_List(s *capnp.Segment, sz int32) (Publications_create_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return capnp.StructList[Publications_create_Params](l), err
}

// Publications_create_Params_Future is a wrapper for a Publications_create_Params promised by a client call.
type Publications_create_Params_Future struct{ *capnp.Future }

func (f Publications_create_Params_Future) Struct() (Publications_create_Params, error) {
	p, err := f.Future.Ptr()
	return Publications_create_Params(p.Struct()), err
}
func (p Publications_create_Params_Future) Schema() capnp2.Schema_Future {
	return capnp2.Schema_Future{Future: p.Future.Field(2, nil)}
}

type Publications_create_Results capnp.Struct

// Publications_create_Results_TypeID is the unique identifier for the type Publications_create_Results.
const Publications_create_Results_TypeID = 0x9d09768207bbb14b

func NewPublications_create_Results(s *capnp.Segment) (Publications_create_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Publications_create_Results(st), err
}

func NewRootPublications_create_Results(s *capnp.Segment) (Publications_create_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Publications_create_Results(st), err
}

func ReadRootPublications_create_Results(msg *capnp.Message) (Publications_create_Results, error) {
	root, err := msg.Root()
	return Publications_create_Results(root.Struct()), err
}

func (s Publications_create_Results) String() string {
	str, _ := text.Marshal(0x9d09768207bbb14b, capnp.Struct(s))
	return str
}

func (s Publications_create_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Publications_create_Results) DecodeFromPtr(p capnp.Ptr) Publications_create_Results {
	return Publications_create_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Publications_create_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Publications_create_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Publications_create_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Publications_create_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Publications_create_Results_List is a list of Publications_create_Results.
type Publications_create_Results_List = capnp.StructList[Publications_create_Results]

// NewPublications_create_Results creates a new list of Publications_create_Results.
func NewPublications_create_Results_List(s *capnp.Segment, sz int32) (Publications_create_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Publications_create_Results](l), err
}

// Publications_create_Results_Future is a wrapper for a Publications_create_Results promised by a client call.
type Publications_create_Results_Future struct{ *capnp.Future }

func (f Publications_create_Results_Future) Struct() (Publications_create_Results, error) {
	p, err := f.Future.Ptr()
	return Publications_create_Results(p.Struct()), err
}

type Publications_push_Params capnp.Struct

// Publications_push_Params_TypeID is the unique identifier for the type Publications_push_Params.
const Publications_push_Params_TypeID = 0x85cf10ba0781d1d9

func NewPublications_push_Params(s *capnp.Segment) (Publications_push_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Publications_push_Params(st), err
}

func NewRootPublications_push_Params(s *capnp.Segment) (Publications_push_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Publications_push_Params(st), err
}

func ReadRootPublications_push_Params(msg *capnp.Message) (Publications_push_Params, error) {
	root, err := msg.Root()
	return Publications_push_Params(root.Struct()), err
}

func (s Publications_push_Params) String() string {
	str, _ := text.Marshal(0x85cf10ba0781d1d9, capnp.Struct(s))
	return str
}

func (s Publications_push_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Publications_push_Params) DecodeFromPtr(p capnp.Ptr) Publications_push_Params {
	return Publications_push_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Publications_push_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Publications_push_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Publications_push_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Publications_push_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Publications_push_Params) Ns() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Publications_push_Params) HasNs() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Publications_push_Params) NsBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Publications_push_Params) SetNs(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Publications_push_Params) Table() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Publications_push_Params) HasTable() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Publications_push_Params) TableBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Publications_push_Params) SetTable(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Publications_push_Params) Tx() (capnp2.Tx, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp2.Tx(p.Struct()), err
}

func (s Publications_push_Params) HasTx() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Publications_push_Params) SetTx(v capnp2.Tx) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewTx sets the tx field to a newly
// allocated capnp2.Tx struct, preferring placement in s's segment.
func (s Publications_push_Params) NewTx() (capnp2.Tx, error) {
	ss, err := capnp2.NewTx(capnp.Struct(s).Segment())
	if err != nil {
		return capnp2.Tx{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Publications_push_Params) Sig() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return []byte(p.Data()), err
}

func (s Publications_push_Params) HasSig() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Publications_push_Params) SetSig(v []byte) error {
	return capnp.Struct(s).SetData(3, v)
}

// Publications_push_Params_List is a list of Publications_push_Params.
type Publications_push_Params_List = capnp.StructList[Publications_push_Params]

// NewPublications_push_Params creates a new list of Publications_push_Params.
func NewPublications_push_Params_List(s *capnp.Segment, sz int32) (Publications_push_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return capnp.StructList[Publications_push_Params](l), err
}

// Publications_push_Params_Future is a wrapper for a Publications_push_Params promised by a client call.
type Publications_push_Params_Future struct{ *capnp.Future }

func (f Publications_push_Params_Future) Struct() (Publications_push_Params, error) {
	p, err := f.Future.Ptr()
	return Publications_push_Params(p.Struct()), err
}
func (p Publications_push_Params_Future) Tx() capnp2.Tx_Future {
	return capnp2.Tx_Future{Future: p.Future.Field(2, nil)}
}

type Publications_push_Results capnp.Struct

// Publications_push_Results_TypeID is the unique identifier for the type Publications_push_Results.
const Publications_push_Results_TypeID = 0xdf7b33d89ff629bd

func NewPublications_push_Results(s *capnp.Segment) (Publications_push_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Publications_push_Results(st), err
}

func NewRootPublications_push_Results(s *capnp.Segment) (Publications_push_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Publications_push_Results(st), err
}

func ReadRootPublications_push_Results(msg *capnp.Message) (Publications_push_Results, error) {
	root, err := msg.Root()
	return Publications_push_Results(root.Struct()), err
}

func (s Publications_push_Results) String() string {
	str, _ := text.Marshal(0xdf7b33d89ff629bd, capnp.Struct(s))
	return str
}

func (s Publications_push_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Publications_push_Results) DecodeFromPtr(p capnp.Ptr) Publications_push_Results {
	return Publications_push_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Publications_push_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Publications_push_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Publications_push_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Publications_push_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Publications_push_Results_List is a list of Publications_push_Results.
type Publications_push_Results_List = capnp.StructList[Publications_push_Results]

// NewPublications_push_Results creates a new list of Publications_push_Results.
func NewPublications_push_Results_List(s *capnp.Segment, sz int32) (Publications_push_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Publications_push_Results](l), err
}

// Publications_push_Results_Future is a wrapper for a Publications_push_Results promised by a client call.
type Publications_push_Results_Future struct{ *capnp.Future }

func (f Publications_push_Results_Future) Struct() (Publications_push_Results, error) {
	p, err := f.Future.Ptr()
	return Publications_push_Results(p.Struct()), err
}

const schema_9cf9878fd3dd8473 = "x\xda\x9c\x931h\xd4P\x18\xc7\xbf\xff{\xef\x1a\x85" +
	"\x1e\xbdG\x0eDANE\x07\x1d\xae\xf6n\xbb\xa5'" +
	"\x0e\x0e.\xf7:+\xfa.\x0dM0\xc9\xc5\xbc\xa4Z" +
	"\x9c\x14\xf5p\x12\x077\xa5\x93\x83\xa3\x8ej\x07\x97[" +
	"E]\xacX\x04\x11D\xc1M\x84\x0e\x12Ik\xca\x0d" +
	"\x82\xf6\xb6\xe4}\xbf?|?\xde\xff\x9d\x0c\xd1\x15s" +
	"\xd5a\x85\x98\xeaV\xa6\xf2\xf5\xd7\xd7\xadg\xb5W\xb7" +
	"H6AT\x11\x16Q\xfb1{\x03\x82\xbd\xc6\xbe\x10" +
	"\xf2\xcf\xab\xdf\x9d3\xa7n\xdf\x19\x07\xee\xf1O\x05\xf0" +
	"\x88\x17\xc0\xd9'\xcf\xad\x1b\xcb{\x1fn\x03[\xf3\x15" +
	"\xf1\x0d$\xf2\xb5\xe3?W\xdf\xb5\xaf}\x1c\x9b\x84\xe2" +
	"}1\xd9\xd8\xf7\xc3[?\xf4\xe1\x17\xc9\xc3<77" +
	"7\xde\xde\x1dn> B[\x8b\x04vV\xa0\xf6e" +
	"1\xb4_\x0a\x8bV\xf2\xf8\xd2\xd2l_\x1b\x7f*\x8a" +
	"\x93\xc1\xb2\xbf\xe8&\xb3\xe5G\xd3\xd1q\x14wzY" +
	"?\xf0\x1d\x9d\xfa\x83\xc84\xe3\xccxG{:\xd1!" +
	"\x8c\xaaqA$@$\xf5\x01\"u\x8eCy\x0c\x12" +
	"\xa8\xa38t[D\xea\"\x87\x0a\x18$cu0\"" +
	"\xe9\x17\xe4\"\x87\x8a\x19$\xe7up\"\x19\x1e!R" +
	"\x1e\x87J\x19xd0M\x0c\xd3\x84F\xaa\xfb\x81[" +
	"\xfe\xf1\xf4*j\xf9\x85\xcd\xec\xa0u\xde\xfeJ\x04\xd4" +
	"\x08\x96\xf1\x97P%\x86*a\xb7.N\xe2\xea\xd4-" +
	"l,\x1dNh\xd3\xf9\x9bM\xeb?l\xe6\x8d\xe3\xb9" +
	"\xa1F-?=z1\xba\xdf\x1a=\xfdc\xd4\x18\\" +
	"\x89\xdc\xa4\xc4&tZp\xcdL\x16\xa4f\xa2\xeb]" +
	"pM\x16\xf0\xb1\xb0\xf8W\xb8\xb1\x95\xee\x01j\x0f\xaf" +
	"\x10\xed\xf4\x1ae\x7f\xe5\\\x87\x98<f\x01;\x8f\x02" +
	"e\x83\xe5\xfe\x13\xc4d\xd5\x9a\xdf\xde\xbd\x8b\x99b\x8b" +
	".z\xc0\xef\x00\x00\x00\xff\xff\x8d\x8d\xebn"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_9cf9878fd3dd8473,
		Nodes: []uint64{
			0x85cf10ba0781d1d9,
			0x8986414763ed9fe4,
			0x9d09768207bbb14b,
			0xdf7b33d89ff629bd,
			0xfddc20d968f417dd,
		},
		Compressed: true,
	})
}
