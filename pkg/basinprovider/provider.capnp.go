// Code generated by capnpc-go. DO NOT EDIT.

package basinprovider

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	capnp2 "github.com/tablelandnetwork/basin-cli/pkg/capnp"
)

type BasinProviderClient capnp.Client

// BasinProviderClient_TypeID is the unique identifier for the type BasinProviderClient.
const BasinProviderClient_TypeID = 0xf546c174382c3adb

func (c BasinProviderClient) Push(ctx context.Context, params func(BasinProviderClient_push_Params) error) (BasinProviderClient_push_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf546c174382c3adb,
			MethodID:      0,
			InterfaceName: "pkg/basinprovider/provider.capnp:BasinProviderClient",
			MethodName:    "push",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(BasinProviderClient_push_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return BasinProviderClient_push_Results_Future{Future: ans.Future()}, release

}

func (c BasinProviderClient) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c BasinProviderClient) String() string {
	return "BasinProviderClient(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c BasinProviderClient) AddRef() BasinProviderClient {
	return BasinProviderClient(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c BasinProviderClient) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c BasinProviderClient) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c BasinProviderClient) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (BasinProviderClient) DecodeFromPtr(p capnp.Ptr) BasinProviderClient {
	return BasinProviderClient(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c BasinProviderClient) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c BasinProviderClient) IsSame(other BasinProviderClient) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c BasinProviderClient) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c BasinProviderClient) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A BasinProviderClient_Server is a BasinProviderClient with a local implementation.
type BasinProviderClient_Server interface {
	Push(context.Context, BasinProviderClient_push) error
}

// BasinProviderClient_NewServer creates a new Server from an implementation of BasinProviderClient_Server.
func BasinProviderClient_NewServer(s BasinProviderClient_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(BasinProviderClient_Methods(nil, s), s, c)
}

// BasinProviderClient_ServerToClient creates a new Client from an implementation of BasinProviderClient_Server.
// The caller is responsible for calling Release on the returned Client.
func BasinProviderClient_ServerToClient(s BasinProviderClient_Server) BasinProviderClient {
	return BasinProviderClient(capnp.NewClient(BasinProviderClient_NewServer(s)))
}

// BasinProviderClient_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func BasinProviderClient_Methods(methods []server.Method, s BasinProviderClient_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf546c174382c3adb,
			MethodID:      0,
			InterfaceName: "pkg/basinprovider/provider.capnp:BasinProviderClient",
			MethodName:    "push",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Push(ctx, BasinProviderClient_push{call})
		},
	})

	return methods
}

// BasinProviderClient_push holds the state for a server call to BasinProviderClient.push.
// See server.Call for documentation.
type BasinProviderClient_push struct {
	*server.Call
}

// Args returns the call's arguments.
func (c BasinProviderClient_push) Args() BasinProviderClient_push_Params {
	return BasinProviderClient_push_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c BasinProviderClient_push) AllocResults() (BasinProviderClient_push_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BasinProviderClient_push_Results(r), err
}

// BasinProviderClient_List is a list of BasinProviderClient.
type BasinProviderClient_List = capnp.CapList[BasinProviderClient]

// NewBasinProviderClient creates a new list of BasinProviderClient.
func NewBasinProviderClient_List(s *capnp.Segment, sz int32) (BasinProviderClient_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[BasinProviderClient](l), err
}

type BasinProviderClient_push_Params capnp.Struct

// BasinProviderClient_push_Params_TypeID is the unique identifier for the type BasinProviderClient_push_Params.
const BasinProviderClient_push_Params_TypeID = 0x91dd396261b290f4

func NewBasinProviderClient_push_Params(s *capnp.Segment) (BasinProviderClient_push_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return BasinProviderClient_push_Params(st), err
}

func NewRootBasinProviderClient_push_Params(s *capnp.Segment) (BasinProviderClient_push_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return BasinProviderClient_push_Params(st), err
}

func ReadRootBasinProviderClient_push_Params(msg *capnp.Message) (BasinProviderClient_push_Params, error) {
	root, err := msg.Root()
	return BasinProviderClient_push_Params(root.Struct()), err
}

func (s BasinProviderClient_push_Params) String() string {
	str, _ := text.Marshal(0x91dd396261b290f4, capnp.Struct(s))
	return str
}

func (s BasinProviderClient_push_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BasinProviderClient_push_Params) DecodeFromPtr(p capnp.Ptr) BasinProviderClient_push_Params {
	return BasinProviderClient_push_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BasinProviderClient_push_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BasinProviderClient_push_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BasinProviderClient_push_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BasinProviderClient_push_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BasinProviderClient_push_Params) Tx() (capnp2.Tx, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp2.Tx(p.Struct()), err
}

func (s BasinProviderClient_push_Params) HasTx() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BasinProviderClient_push_Params) SetTx(v capnp2.Tx) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewTx sets the tx field to a newly
// allocated capnp2.Tx struct, preferring placement in s's segment.
func (s BasinProviderClient_push_Params) NewTx() (capnp2.Tx, error) {
	ss, err := capnp2.NewTx(capnp.Struct(s).Segment())
	if err != nil {
		return capnp2.Tx{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s BasinProviderClient_push_Params) Signature() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s BasinProviderClient_push_Params) HasSignature() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s BasinProviderClient_push_Params) SetSignature(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

// BasinProviderClient_push_Params_List is a list of BasinProviderClient_push_Params.
type BasinProviderClient_push_Params_List = capnp.StructList[BasinProviderClient_push_Params]

// NewBasinProviderClient_push_Params creates a new list of BasinProviderClient_push_Params.
func NewBasinProviderClient_push_Params_List(s *capnp.Segment, sz int32) (BasinProviderClient_push_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[BasinProviderClient_push_Params](l), err
}

// BasinProviderClient_push_Params_Future is a wrapper for a BasinProviderClient_push_Params promised by a client call.
type BasinProviderClient_push_Params_Future struct{ *capnp.Future }

func (f BasinProviderClient_push_Params_Future) Struct() (BasinProviderClient_push_Params, error) {
	p, err := f.Future.Ptr()
	return BasinProviderClient_push_Params(p.Struct()), err
}
func (p BasinProviderClient_push_Params_Future) Tx() capnp2.Tx_Future {
	return capnp2.Tx_Future{Future: p.Future.Field(0, nil)}
}

type BasinProviderClient_push_Results capnp.Struct

// BasinProviderClient_push_Results_TypeID is the unique identifier for the type BasinProviderClient_push_Results.
const BasinProviderClient_push_Results_TypeID = 0xb1088dbfb4e33bd0

func NewBasinProviderClient_push_Results(s *capnp.Segment) (BasinProviderClient_push_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BasinProviderClient_push_Results(st), err
}

func NewRootBasinProviderClient_push_Results(s *capnp.Segment) (BasinProviderClient_push_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BasinProviderClient_push_Results(st), err
}

func ReadRootBasinProviderClient_push_Results(msg *capnp.Message) (BasinProviderClient_push_Results, error) {
	root, err := msg.Root()
	return BasinProviderClient_push_Results(root.Struct()), err
}

func (s BasinProviderClient_push_Results) String() string {
	str, _ := text.Marshal(0xb1088dbfb4e33bd0, capnp.Struct(s))
	return str
}

func (s BasinProviderClient_push_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BasinProviderClient_push_Results) DecodeFromPtr(p capnp.Ptr) BasinProviderClient_push_Results {
	return BasinProviderClient_push_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BasinProviderClient_push_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BasinProviderClient_push_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BasinProviderClient_push_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BasinProviderClient_push_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BasinProviderClient_push_Results) Response() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s BasinProviderClient_push_Results) SetResponse(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

// BasinProviderClient_push_Results_List is a list of BasinProviderClient_push_Results.
type BasinProviderClient_push_Results_List = capnp.StructList[BasinProviderClient_push_Results]

// NewBasinProviderClient_push_Results creates a new list of BasinProviderClient_push_Results.
func NewBasinProviderClient_push_Results_List(s *capnp.Segment, sz int32) (BasinProviderClient_push_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[BasinProviderClient_push_Results](l), err
}

// BasinProviderClient_push_Results_Future is a wrapper for a BasinProviderClient_push_Results promised by a client call.
type BasinProviderClient_push_Results_Future struct{ *capnp.Future }

func (f BasinProviderClient_push_Results_Future) Struct() (BasinProviderClient_push_Results, error) {
	p, err := f.Future.Ptr()
	return BasinProviderClient_push_Results(p.Struct()), err
}

const schema_9cf9878fd3dd8473 = "x\xda\xa4\x911\x8b\xd3`\x1c\xc6\x9f\xe7MbZ1" +
	"\xb4\xafq\x10\xc1A(\x88R\xdbJ)\xd4:X\x14" +
	"\x14\x9c\xf2v\x17Ik\xa8\xc1\x9a\xc6\xbc\x89\xfa\x01\x04" +
	"q\x10u\xf7\x13\x08\x0e\x8a\xbbt\xb8\xfd\xe0\xc6\xa3\xc3" +
	"qS\xf7\xbb\xa1\xd3{\x04\xae\xe5\xc6\x83\xdb\xfe\xfcy" +
	"x~?x\xea\x07C\xfb\xbew\xdb\x86P\x1d\xe7\x92" +
	"9\xfa\xfe7\x1c?X\xfe\x80\xec\x11p\x84\x0bt\xd7" +
	"\xbc,@_\x8a\x0f\xa0\xd9}x\xf8\xef\xff\xd7\xca\x1f" +
	"\xa8\x1e\x09\xd8e\xe0\x9d\xb8Z\x06\xbe\x88G\xa0\xd9\x1f" +
	"4\xfb\xf9\xe2\xe91\xe4-\xcb\xe8O\xcb\xbdo\x9f\xd7" +
	"?\x01v\x7f\x8b_\xf4w\xcaF\x7f!\x9e\xf9+\xe1" +
	"bb\xd27\xd3\xf68\xd4\xb1\x9b\xa4\xd9\xfc}\xfc*" +
	"\xca\xda\x9b\xa35\x09\xd3$\x1d<\x0eu\x9c\x04\xa7\xbf" +
	"'\xb38J\xf2VZ\xe8\xd7\x8d \xcc\xc2\xb7\x1aP" +
	"\x15\xcb\x06l\x02\xf2\xce\x0d@5,\xaa\x8e\xa0$\xaf" +
	"\x95\x86\xf2\xde\x08PM\x8b\xaa/h\xe5\x1fY7/" +
	"\xd7\xc5M\xf7\x85\xbf\x02\xc8:ht<M\xc2\xbc\xc8" +
	"\xc0\x88\x1e\x04=\xf0\"b\xa3H\x17\xb3\x9cZ\xd9[" +
	"1\xef9\xa0\xaeXT\xd7\x05M\x16\xe9t\x9e\xe8\x08" +
	"\x00\xab\x10\xac\x9e\xc19\xe7\xc5\xd5J^@*\xdbr" +
	"\x80\xedn\xdc\xec#\xe5]\x08\xe9\xb8\xb5Ri\xc8\x80" +
	"<\x09\x00\x00\xff\xff\xbe\xda\x8e*"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_9cf9878fd3dd8473,
		Nodes: []uint64{
			0x91dd396261b290f4,
			0xb1088dbfb4e33bd0,
			0xf546c174382c3adb,
		},
		Compressed: true,
	})
}
