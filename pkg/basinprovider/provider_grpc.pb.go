// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: provider.proto

package basinprovider

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BasinProviderClient is the client API for BasinProvider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BasinProviderClient interface {
	Push(ctx context.Context, in *Data, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type basinProviderClient struct {
	cc grpc.ClientConnInterface
}

func NewBasinProviderClient(cc grpc.ClientConnInterface) BasinProviderClient {
	return &basinProviderClient{cc}
}

func (c *basinProviderClient) Push(ctx context.Context, in *Data, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/basinprovider.BasinProvider/Push", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BasinProviderServer is the server API for BasinProvider service.
// All implementations must embed UnimplementedBasinProviderServer
// for forward compatibility
type BasinProviderServer interface {
	Push(context.Context, *Data) (*emptypb.Empty, error)
	mustEmbedUnimplementedBasinProviderServer()
}

// UnimplementedBasinProviderServer must be embedded to have forward compatible implementations.
type UnimplementedBasinProviderServer struct {
}

func (UnimplementedBasinProviderServer) Push(context.Context, *Data) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (UnimplementedBasinProviderServer) mustEmbedUnimplementedBasinProviderServer() {}

// UnsafeBasinProviderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BasinProviderServer will
// result in compilation errors.
type UnsafeBasinProviderServer interface {
	mustEmbedUnimplementedBasinProviderServer()
}

func RegisterBasinProviderServer(s grpc.ServiceRegistrar, srv BasinProviderServer) {
	s.RegisterService(&BasinProvider_ServiceDesc, srv)
}

func _BasinProvider_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasinProviderServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/basinprovider.BasinProvider/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasinProviderServer).Push(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

// BasinProvider_ServiceDesc is the grpc.ServiceDesc for BasinProvider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BasinProvider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "basinprovider.BasinProvider",
	HandlerType: (*BasinProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Push",
			Handler:    _BasinProvider_Push_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "provider.proto",
}
