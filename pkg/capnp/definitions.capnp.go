// Code generated by capnpc-go. DO NOT EDIT.

package capnp

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type Tx capnp.Struct

// Tx_TypeID is the unique identifier for the type Tx.
const Tx_TypeID = 0xe9135d071d75f95f

func NewTx(s *capnp.Segment) (Tx, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Tx(st), err
}

func NewRootTx(s *capnp.Segment) (Tx, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Tx(st), err
}

func ReadRootTx(msg *capnp.Message) (Tx, error) {
	root, err := msg.Root()
	return Tx(root.Struct()), err
}

func (s Tx) String() string {
	str, _ := text.Marshal(0xe9135d071d75f95f, capnp.Struct(s))
	return str
}

func (s Tx) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Tx) DecodeFromPtr(p capnp.Ptr) Tx {
	return Tx(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Tx) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Tx) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Tx) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Tx) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Tx) CommitLSN() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Tx) SetCommitLSN(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s Tx) Records() (Tx_Record_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Tx_Record_List(p.List()), err
}

func (s Tx) HasRecords() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Tx) SetRecords(v Tx_Record_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewRecords sets the records field to a newly
// allocated Tx_Record_List, preferring placement in s's segment.
func (s Tx) NewRecords(n int32) (Tx_Record_List, error) {
	l, err := NewTx_Record_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Tx_Record_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Tx_List is a list of Tx.
type Tx_List = capnp.StructList[Tx]

// NewTx creates a new list of Tx.
func NewTx_List(s *capnp.Segment, sz int32) (Tx_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Tx](l), err
}

// Tx_Future is a wrapper for a Tx promised by a client call.
type Tx_Future struct{ *capnp.Future }

func (f Tx_Future) Struct() (Tx, error) {
	p, err := f.Future.Ptr()
	return Tx(p.Struct()), err
}

type Tx_Record capnp.Struct

// Tx_Record_TypeID is the unique identifier for the type Tx_Record.
const Tx_Record_TypeID = 0xadfa24e64cb4fa48

func NewTx_Record(s *capnp.Segment) (Tx_Record, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 6})
	return Tx_Record(st), err
}

func NewRootTx_Record(s *capnp.Segment) (Tx_Record, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 6})
	return Tx_Record(st), err
}

func ReadRootTx_Record(msg *capnp.Message) (Tx_Record, error) {
	root, err := msg.Root()
	return Tx_Record(root.Struct()), err
}

func (s Tx_Record) String() string {
	str, _ := text.Marshal(0xadfa24e64cb4fa48, capnp.Struct(s))
	return str
}

func (s Tx_Record) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Tx_Record) DecodeFromPtr(p capnp.Ptr) Tx_Record {
	return Tx_Record(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Tx_Record) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Tx_Record) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Tx_Record) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Tx_Record) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Tx_Record) Action() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Tx_Record) HasAction() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Tx_Record) ActionBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Tx_Record) SetAction(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Tx_Record) Timestamp() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Tx_Record) HasTimestamp() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Tx_Record) TimestampBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Tx_Record) SetTimestamp(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Tx_Record) Schema() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Tx_Record) HasSchema() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Tx_Record) SchemaBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Tx_Record) SetSchema(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s Tx_Record) Table() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s Tx_Record) HasTable() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Tx_Record) TableBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s Tx_Record) SetTable(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

func (s Tx_Record) Columns() (Tx_Record_Column_List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return Tx_Record_Column_List(p.List()), err
}

func (s Tx_Record) HasColumns() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s Tx_Record) SetColumns(v Tx_Record_Column_List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewColumns sets the columns field to a newly
// allocated Tx_Record_Column_List, preferring placement in s's segment.
func (s Tx_Record) NewColumns(n int32) (Tx_Record_Column_List, error) {
	l, err := NewTx_Record_Column_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Tx_Record_Column_List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}
func (s Tx_Record) PrimaryKey() (Tx_Record_PrimaryKey_List, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return Tx_Record_PrimaryKey_List(p.List()), err
}

func (s Tx_Record) HasPrimaryKey() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s Tx_Record) SetPrimaryKey(v Tx_Record_PrimaryKey_List) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewPrimaryKey sets the primaryKey field to a newly
// allocated Tx_Record_PrimaryKey_List, preferring placement in s's segment.
func (s Tx_Record) NewPrimaryKey(n int32) (Tx_Record_PrimaryKey_List, error) {
	l, err := NewTx_Record_PrimaryKey_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Tx_Record_PrimaryKey_List{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}

// Tx_Record_List is a list of Tx_Record.
type Tx_Record_List = capnp.StructList[Tx_Record]

// NewTx_Record creates a new list of Tx_Record.
func NewTx_Record_List(s *capnp.Segment, sz int32) (Tx_Record_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 6}, sz)
	return capnp.StructList[Tx_Record](l), err
}

// Tx_Record_Future is a wrapper for a Tx_Record promised by a client call.
type Tx_Record_Future struct{ *capnp.Future }

func (f Tx_Record_Future) Struct() (Tx_Record, error) {
	p, err := f.Future.Ptr()
	return Tx_Record(p.Struct()), err
}

type Tx_Record_Column capnp.Struct

// Tx_Record_Column_TypeID is the unique identifier for the type Tx_Record_Column.
const Tx_Record_Column_TypeID = 0xdaf0d54cc25988fc

func NewTx_Record_Column(s *capnp.Segment) (Tx_Record_Column, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Tx_Record_Column(st), err
}

func NewRootTx_Record_Column(s *capnp.Segment) (Tx_Record_Column, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Tx_Record_Column(st), err
}

func ReadRootTx_Record_Column(msg *capnp.Message) (Tx_Record_Column, error) {
	root, err := msg.Root()
	return Tx_Record_Column(root.Struct()), err
}

func (s Tx_Record_Column) String() string {
	str, _ := text.Marshal(0xdaf0d54cc25988fc, capnp.Struct(s))
	return str
}

func (s Tx_Record_Column) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Tx_Record_Column) DecodeFromPtr(p capnp.Ptr) Tx_Record_Column {
	return Tx_Record_Column(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Tx_Record_Column) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Tx_Record_Column) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Tx_Record_Column) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Tx_Record_Column) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Tx_Record_Column) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Tx_Record_Column) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Tx_Record_Column) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Tx_Record_Column) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Tx_Record_Column) Type() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Tx_Record_Column) HasType() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Tx_Record_Column) TypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Tx_Record_Column) SetType(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Tx_Record_Column) Value() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return []byte(p.Data()), err
}

func (s Tx_Record_Column) HasValue() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Tx_Record_Column) SetValue(v []byte) error {
	return capnp.Struct(s).SetData(2, v)
}

// Tx_Record_Column_List is a list of Tx_Record_Column.
type Tx_Record_Column_List = capnp.StructList[Tx_Record_Column]

// NewTx_Record_Column creates a new list of Tx_Record_Column.
func NewTx_Record_Column_List(s *capnp.Segment, sz int32) (Tx_Record_Column_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[Tx_Record_Column](l), err
}

// Tx_Record_Column_Future is a wrapper for a Tx_Record_Column promised by a client call.
type Tx_Record_Column_Future struct{ *capnp.Future }

func (f Tx_Record_Column_Future) Struct() (Tx_Record_Column, error) {
	p, err := f.Future.Ptr()
	return Tx_Record_Column(p.Struct()), err
}

type Tx_Record_PrimaryKey capnp.Struct

// Tx_Record_PrimaryKey_TypeID is the unique identifier for the type Tx_Record_PrimaryKey.
const Tx_Record_PrimaryKey_TypeID = 0x9722004316c0ea9f

func NewTx_Record_PrimaryKey(s *capnp.Segment) (Tx_Record_PrimaryKey, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Tx_Record_PrimaryKey(st), err
}

func NewRootTx_Record_PrimaryKey(s *capnp.Segment) (Tx_Record_PrimaryKey, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Tx_Record_PrimaryKey(st), err
}

func ReadRootTx_Record_PrimaryKey(msg *capnp.Message) (Tx_Record_PrimaryKey, error) {
	root, err := msg.Root()
	return Tx_Record_PrimaryKey(root.Struct()), err
}

func (s Tx_Record_PrimaryKey) String() string {
	str, _ := text.Marshal(0x9722004316c0ea9f, capnp.Struct(s))
	return str
}

func (s Tx_Record_PrimaryKey) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Tx_Record_PrimaryKey) DecodeFromPtr(p capnp.Ptr) Tx_Record_PrimaryKey {
	return Tx_Record_PrimaryKey(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Tx_Record_PrimaryKey) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Tx_Record_PrimaryKey) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Tx_Record_PrimaryKey) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Tx_Record_PrimaryKey) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Tx_Record_PrimaryKey) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Tx_Record_PrimaryKey) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Tx_Record_PrimaryKey) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Tx_Record_PrimaryKey) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Tx_Record_PrimaryKey) Type() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Tx_Record_PrimaryKey) HasType() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Tx_Record_PrimaryKey) TypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Tx_Record_PrimaryKey) SetType(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// Tx_Record_PrimaryKey_List is a list of Tx_Record_PrimaryKey.
type Tx_Record_PrimaryKey_List = capnp.StructList[Tx_Record_PrimaryKey]

// NewTx_Record_PrimaryKey creates a new list of Tx_Record_PrimaryKey.
func NewTx_Record_PrimaryKey_List(s *capnp.Segment, sz int32) (Tx_Record_PrimaryKey_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Tx_Record_PrimaryKey](l), err
}

// Tx_Record_PrimaryKey_Future is a wrapper for a Tx_Record_PrimaryKey promised by a client call.
type Tx_Record_PrimaryKey_Future struct{ *capnp.Future }

func (f Tx_Record_PrimaryKey_Future) Struct() (Tx_Record_PrimaryKey, error) {
	p, err := f.Future.Ptr()
	return Tx_Record_PrimaryKey(p.Struct()), err
}

type Schema capnp.Struct

// Schema_TypeID is the unique identifier for the type Schema.
const Schema_TypeID = 0xb2c63295c6bcc643

func NewSchema(s *capnp.Segment) (Schema, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Schema(st), err
}

func NewRootSchema(s *capnp.Segment) (Schema, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Schema(st), err
}

func ReadRootSchema(msg *capnp.Message) (Schema, error) {
	root, err := msg.Root()
	return Schema(root.Struct()), err
}

func (s Schema) String() string {
	str, _ := text.Marshal(0xb2c63295c6bcc643, capnp.Struct(s))
	return str
}

func (s Schema) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Schema) DecodeFromPtr(p capnp.Ptr) Schema {
	return Schema(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Schema) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Schema) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Schema) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Schema) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Schema) Columns() (Schema_Column_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Schema_Column_List(p.List()), err
}

func (s Schema) HasColumns() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Schema) SetColumns(v Schema_Column_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewColumns sets the columns field to a newly
// allocated Schema_Column_List, preferring placement in s's segment.
func (s Schema) NewColumns(n int32) (Schema_Column_List, error) {
	l, err := NewSchema_Column_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Schema_Column_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Schema_List is a list of Schema.
type Schema_List = capnp.StructList[Schema]

// NewSchema creates a new list of Schema.
func NewSchema_List(s *capnp.Segment, sz int32) (Schema_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Schema](l), err
}

// Schema_Future is a wrapper for a Schema promised by a client call.
type Schema_Future struct{ *capnp.Future }

func (f Schema_Future) Struct() (Schema, error) {
	p, err := f.Future.Ptr()
	return Schema(p.Struct()), err
}

type Schema_Column capnp.Struct

// Schema_Column_TypeID is the unique identifier for the type Schema_Column.
const Schema_Column_TypeID = 0xc6ee33dc50be1a5a

func NewSchema_Column(s *capnp.Segment) (Schema_Column, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Schema_Column(st), err
}

func NewRootSchema_Column(s *capnp.Segment) (Schema_Column, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Schema_Column(st), err
}

func ReadRootSchema_Column(msg *capnp.Message) (Schema_Column, error) {
	root, err := msg.Root()
	return Schema_Column(root.Struct()), err
}

func (s Schema_Column) String() string {
	str, _ := text.Marshal(0xc6ee33dc50be1a5a, capnp.Struct(s))
	return str
}

func (s Schema_Column) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Schema_Column) DecodeFromPtr(p capnp.Ptr) Schema_Column {
	return Schema_Column(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Schema_Column) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Schema_Column) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Schema_Column) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Schema_Column) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Schema_Column) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Schema_Column) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Schema_Column) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Schema_Column) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Schema_Column) Type() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Schema_Column) HasType() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Schema_Column) TypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Schema_Column) SetType(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Schema_Column) IsNullable() bool {
	return capnp.Struct(s).Bit(0)
}

func (s Schema_Column) SetIsNullable(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s Schema_Column) IsPartOfPrimaryKey() bool {
	return capnp.Struct(s).Bit(1)
}

func (s Schema_Column) SetIsPartOfPrimaryKey(v bool) {
	capnp.Struct(s).SetBit(1, v)
}

// Schema_Column_List is a list of Schema_Column.
type Schema_Column_List = capnp.StructList[Schema_Column]

// NewSchema_Column creates a new list of Schema_Column.
func NewSchema_Column_List(s *capnp.Segment, sz int32) (Schema_Column_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[Schema_Column](l), err
}

// Schema_Column_Future is a wrapper for a Schema_Column promised by a client call.
type Schema_Column_Future struct{ *capnp.Future }

func (f Schema_Column_Future) Struct() (Schema_Column, error) {
	p, err := f.Future.Ptr()
	return Schema_Column(p.Struct()), err
}

type DealInfo capnp.Struct

// DealInfo_TypeID is the unique identifier for the type DealInfo.
const DealInfo_TypeID = 0xc69bf7c475bb2886

func NewDealInfo(s *capnp.Segment) (DealInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return DealInfo(st), err
}

func NewRootDealInfo(s *capnp.Segment) (DealInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return DealInfo(st), err
}

func ReadRootDealInfo(msg *capnp.Message) (DealInfo, error) {
	root, err := msg.Root()
	return DealInfo(root.Struct()), err
}

func (s DealInfo) String() string {
	str, _ := text.Marshal(0xc69bf7c475bb2886, capnp.Struct(s))
	return str
}

func (s DealInfo) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DealInfo) DecodeFromPtr(p capnp.Ptr) DealInfo {
	return DealInfo(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DealInfo) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DealInfo) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DealInfo) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DealInfo) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DealInfo) Cid() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s DealInfo) HasCid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s DealInfo) CidBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s DealInfo) SetCid(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s DealInfo) Size() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s DealInfo) SetSize(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s DealInfo) Timestamp() int64 {
	return int64(capnp.Struct(s).Uint64(8))
}

func (s DealInfo) SetTimestamp(v int64) {
	capnp.Struct(s).SetUint64(8, uint64(v))
}

func (s DealInfo) Archived() bool {
	return capnp.Struct(s).Bit(32)
}

func (s DealInfo) SetArchived(v bool) {
	capnp.Struct(s).SetBit(32, v)
}

// DealInfo_List is a list of DealInfo.
type DealInfo_List = capnp.StructList[DealInfo]

// NewDealInfo creates a new list of DealInfo.
func NewDealInfo_List(s *capnp.Segment, sz int32) (DealInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[DealInfo](l), err
}

// DealInfo_Future is a wrapper for a DealInfo promised by a client call.
type DealInfo_Future struct{ *capnp.Future }

func (f DealInfo_Future) Struct() (DealInfo, error) {
	p, err := f.Future.Ptr()
	return DealInfo(p.Struct()), err
}

const schema_8c49da2775b6e7db = "x\xda\x8c\x94]h\x1c\xd5\x1b\xc6\x9f\xe7\x9c\x99M\x16" +
	"\xb2\xfft\x98\xe5\xaf\x96\x94h\x0c\xb6\x86&m\x12\xaf" +
	"\x16d\x8b\xa9\x90hZ\xf7\xdd\x16\xc4\xa0\xe8t3q" +
	"Gwv\xd7\xfdh\x8d\x08\xf5JD\xbcT\xc4/\xac" +
	"\xa0P\xc1\xa0\x88z\xa3H\x95\xb2w\xe2\x95\x17\xd6\x82" +
	"x\xa1\xa5^\x88^I\x830rv\xb3\xb3\xe3\xd2\x86" +
	"^\xce\xbb\xef\x9e\xf7\xf9\xbd\xcfs\xce\xe1)u\xc4\x9a" +
	"\xcf|\xaf\xa1\xe4\xa0\x9d\xfa\xf9\xdd\xdf/\xfc\x7fi\xea" +
	"u\xe7.F\xcb\xdb\x9f\xad\xfe6\xbd\xbd\x05[\x8d\x00" +
	"\x8b\xdf\xf1e\xba\xbfr\x04p\x7f\xe1\x19$~w&" +
	"\x19=~\xad\xbdo\xe41\xf7*\xec\x94i\xbeW-" +
	"\xd0=\xa6\xf6\x03\x8b\xbez\x98`\xb4\xd4\xf9\xaa\xf3\xda" +
	"B\xe7S8\x13\x8c~\xba\xf2E{\xff\xa5\x95W`" +
	"\x9b\xf3\x16\x7f\xd4{\xe9^\xd5\xb7\x00\xee_:\x0fF" +
	"/\x1e\xf8\xb2}\xf1\xef\xb7:\x90\x09\xaa\xe1\xee;\xac" +
	"\x19\xba\xf3\x96\x112k]\x01\xa3\xb5\xbd_\x17./" +
	"\xfe\xd1\x81\xdc\xc9\xc4\xa0\x9e\xec\xb4]\xa4\xbb\xcf6\xdd" +
	"\xb7\xd9\xa6\xfb\x9f\x97\x1e\xf9v\xf5\x87?/\xe1\xbf\x8c" +
	"\xda4_\xb3\x9f\xa2\x9b1\x04n:\xf51\x12X2" +
	"\xc1a\xd9\xee{\xa9mw+eT\x7f\x9e:\x83\xd9" +
	"\xa8\xfe\xf4\x93\x87J^\xbdj\xd7\x0f\xad\xfb\x1bA5" +
	"h\x05\xb5js\xce\x94\xea\xb9\x93\xcf\xce\x15\xfdR\xad" +
	"\xb1>Wh\x04\xa1\xd7\xd8|\xd0\xdf\x04\x0a\xa4\x8cj" +
	"\x0b\xb0\x088w\xcf\x002\xad)\x87\x15\x1d2KS" +
	"\x9c5\xc5\x03\x9ar\x8f\xe2x\xd5\x0b}\x8eAq\x0c" +
	"\x1com\xd6\xe3\x8fx\xb8\xbe\xd1\xf0\xc9\xeet\x19e" +
	"r\x05\xe9\\\xec\xb8\xbd\x96_\xaaU\xdaa5\xea\x0b" +
	"\x84\xf67\xe5\xd6X\xdd\x1b9@^\xd5\x94s\x09u" +
	"\xef\x14\x01y[S\xce+:Je\xa9\x00\xe7\x03\xd3" +
	"yNS>Rt\xb4\xceR\x03\xce\x87\x0b\x80\xbc\xaf" +
	")\x9f(:\x96\x95\xa5\x058[\xf7\x01r^S." +
	"*:\xb6\x9d\xa5\x0d8\xdf\xac\x01rAS.+\xe6" +
	"\xbd\x92\x01\x891[A\xe87[^\x08\xd6\xfb\xb5|" +
	"\xb3T\xf6C\xaf\xff9\xd9\xf2NU\xe2\xbd\x9c-u" +
	"\x99\x9a\xfc\x1fX\xd0\xe4\x9e\x01<h\x8aQ=A\x1b" +
	"w\xf5\xb7\xd2\xef\xd9m\xb9'Je_\x87\x9eXL" +
	"D\xd1ang\x9db\xc5\x1b\xcc\x18\xdaQM\x99V" +
	"\xd7\x11\x16\xff\xf7f\x86\x1e\xf5\xbd\xca\xf8Ju\xa3f" +
	"\x12\xb4'\x9e\xe0M\x01\xf2\xa8\xa6\x94\x15\xfb\x16\xf9&" +
	"@OhJ\xc5X\xc4\x9eE\x81\xf1\xad\xac)-c" +
	"\xd1\xed=\x8b\x9ey\x00\x90\xba\xa6<\xaf8R\x0a\xd6" +
	"\xe3\xa45\x83\xe7|\x8eBqt\xc8\x02\x1b\x8a6\x18" +
	"y\x8dR98\xed\xaf\xc3\x88\x87\"\x13\xfa\xad\x1b-" +
	"-\xf4\xe6\xba+bu\x08bf\x00\xe1\\\x8f\x82;" +
	"9\x0b\xd6\x92\x10\xdc\x81x\x13\x90\x96\xa6\xbc\xb0\xeb}" +
	"\x09\x9a\xc7\xdb\x95\x8aw\x0a\xba\xe2\xc7\x92\x83f\xc1k" +
	"\xb4\x1e\xda`\xff\x0a\x98L\xdc\x14\xcf\xe0z/\xd5\xc6" +
	"\x8d\xb1\x06i,F\xba\xdf\xa8?\xa2)\xab\x09\xa4\x15" +
	"S<\xaa)\x85\xc4\xdd9f\xae\xc9\xb2\xa6\x9c\xdcM" +
	"\xfe\xe4i\xaf\xd2\xf6\x99\x81b&!M\x0dK\xcb\xf7" +
	"\xb4u\xb39x\xaf\x99\xcb\x17w^\x83\xc1\xdbS\x1c" +
	"<3}\x81\xf3&\xaf\x075eY1*\xd5\xc20" +
	"h\xad\x9e\x00\x8f3\x0d\xc54x\xb6\xd1=%\x91\xe1" +
	"xF/\xc3\xff\x06\x00\x00\xff\xff.T\x92\x0c"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_8c49da2775b6e7db,
		Nodes: []uint64{
			0x9722004316c0ea9f,
			0xadfa24e64cb4fa48,
			0xb2c63295c6bcc643,
			0xc69bf7c475bb2886,
			0xc6ee33dc50be1a5a,
			0xdaf0d54cc25988fc,
			0xe9135d071d75f95f,
		},
		Compressed: true,
	})
}
