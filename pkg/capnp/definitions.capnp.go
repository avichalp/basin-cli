// Code generated by capnpc-go. DO NOT EDIT.

package capnp

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type Tx capnp.Struct

// Tx_TypeID is the unique identifier for the type Tx.
const Tx_TypeID = 0xe9135d071d75f95f

func NewTx(s *capnp.Segment) (Tx, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Tx(st), err
}

func NewRootTx(s *capnp.Segment) (Tx, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Tx(st), err
}

func ReadRootTx(msg *capnp.Message) (Tx, error) {
	root, err := msg.Root()
	return Tx(root.Struct()), err
}

func (s Tx) String() string {
	str, _ := text.Marshal(0xe9135d071d75f95f, capnp.Struct(s))
	return str
}

func (s Tx) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Tx) DecodeFromPtr(p capnp.Ptr) Tx {
	return Tx(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Tx) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Tx) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Tx) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Tx) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Tx) CommitLSN() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Tx) SetCommitLSN(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s Tx) Records() (Tx_Record_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Tx_Record_List(p.List()), err
}

func (s Tx) HasRecords() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Tx) SetRecords(v Tx_Record_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewRecords sets the records field to a newly
// allocated Tx_Record_List, preferring placement in s's segment.
func (s Tx) NewRecords(n int32) (Tx_Record_List, error) {
	l, err := NewTx_Record_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Tx_Record_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Tx_List is a list of Tx.
type Tx_List = capnp.StructList[Tx]

// NewTx creates a new list of Tx.
func NewTx_List(s *capnp.Segment, sz int32) (Tx_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Tx](l), err
}

// Tx_Future is a wrapper for a Tx promised by a client call.
type Tx_Future struct{ *capnp.Future }

func (f Tx_Future) Struct() (Tx, error) {
	p, err := f.Future.Ptr()
	return Tx(p.Struct()), err
}

type Tx_Record capnp.Struct

// Tx_Record_TypeID is the unique identifier for the type Tx_Record.
const Tx_Record_TypeID = 0xadfa24e64cb4fa48

func NewTx_Record(s *capnp.Segment) (Tx_Record, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 6})
	return Tx_Record(st), err
}

func NewRootTx_Record(s *capnp.Segment) (Tx_Record, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 6})
	return Tx_Record(st), err
}

func ReadRootTx_Record(msg *capnp.Message) (Tx_Record, error) {
	root, err := msg.Root()
	return Tx_Record(root.Struct()), err
}

func (s Tx_Record) String() string {
	str, _ := text.Marshal(0xadfa24e64cb4fa48, capnp.Struct(s))
	return str
}

func (s Tx_Record) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Tx_Record) DecodeFromPtr(p capnp.Ptr) Tx_Record {
	return Tx_Record(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Tx_Record) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Tx_Record) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Tx_Record) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Tx_Record) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Tx_Record) Action() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Tx_Record) HasAction() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Tx_Record) ActionBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Tx_Record) SetAction(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Tx_Record) Timestamp() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Tx_Record) HasTimestamp() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Tx_Record) TimestampBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Tx_Record) SetTimestamp(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Tx_Record) Schema() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Tx_Record) HasSchema() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Tx_Record) SchemaBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Tx_Record) SetSchema(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s Tx_Record) Table() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s Tx_Record) HasTable() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Tx_Record) TableBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s Tx_Record) SetTable(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

func (s Tx_Record) Columns() (Tx_Record_Column_List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return Tx_Record_Column_List(p.List()), err
}

func (s Tx_Record) HasColumns() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s Tx_Record) SetColumns(v Tx_Record_Column_List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewColumns sets the columns field to a newly
// allocated Tx_Record_Column_List, preferring placement in s's segment.
func (s Tx_Record) NewColumns(n int32) (Tx_Record_Column_List, error) {
	l, err := NewTx_Record_Column_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Tx_Record_Column_List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}
func (s Tx_Record) PrimaryKey() (Tx_Record_PrimaryKey_List, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return Tx_Record_PrimaryKey_List(p.List()), err
}

func (s Tx_Record) HasPrimaryKey() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s Tx_Record) SetPrimaryKey(v Tx_Record_PrimaryKey_List) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewPrimaryKey sets the primaryKey field to a newly
// allocated Tx_Record_PrimaryKey_List, preferring placement in s's segment.
func (s Tx_Record) NewPrimaryKey(n int32) (Tx_Record_PrimaryKey_List, error) {
	l, err := NewTx_Record_PrimaryKey_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Tx_Record_PrimaryKey_List{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}

// Tx_Record_List is a list of Tx_Record.
type Tx_Record_List = capnp.StructList[Tx_Record]

// NewTx_Record creates a new list of Tx_Record.
func NewTx_Record_List(s *capnp.Segment, sz int32) (Tx_Record_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 6}, sz)
	return capnp.StructList[Tx_Record](l), err
}

// Tx_Record_Future is a wrapper for a Tx_Record promised by a client call.
type Tx_Record_Future struct{ *capnp.Future }

func (f Tx_Record_Future) Struct() (Tx_Record, error) {
	p, err := f.Future.Ptr()
	return Tx_Record(p.Struct()), err
}

type Tx_Record_Column capnp.Struct

// Tx_Record_Column_TypeID is the unique identifier for the type Tx_Record_Column.
const Tx_Record_Column_TypeID = 0xdaf0d54cc25988fc

func NewTx_Record_Column(s *capnp.Segment) (Tx_Record_Column, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Tx_Record_Column(st), err
}

func NewRootTx_Record_Column(s *capnp.Segment) (Tx_Record_Column, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Tx_Record_Column(st), err
}

func ReadRootTx_Record_Column(msg *capnp.Message) (Tx_Record_Column, error) {
	root, err := msg.Root()
	return Tx_Record_Column(root.Struct()), err
}

func (s Tx_Record_Column) String() string {
	str, _ := text.Marshal(0xdaf0d54cc25988fc, capnp.Struct(s))
	return str
}

func (s Tx_Record_Column) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Tx_Record_Column) DecodeFromPtr(p capnp.Ptr) Tx_Record_Column {
	return Tx_Record_Column(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Tx_Record_Column) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Tx_Record_Column) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Tx_Record_Column) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Tx_Record_Column) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Tx_Record_Column) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Tx_Record_Column) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Tx_Record_Column) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Tx_Record_Column) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Tx_Record_Column) Type() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Tx_Record_Column) HasType() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Tx_Record_Column) TypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Tx_Record_Column) SetType(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Tx_Record_Column) Value() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return []byte(p.Data()), err
}

func (s Tx_Record_Column) HasValue() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Tx_Record_Column) SetValue(v []byte) error {
	return capnp.Struct(s).SetData(2, v)
}

// Tx_Record_Column_List is a list of Tx_Record_Column.
type Tx_Record_Column_List = capnp.StructList[Tx_Record_Column]

// NewTx_Record_Column creates a new list of Tx_Record_Column.
func NewTx_Record_Column_List(s *capnp.Segment, sz int32) (Tx_Record_Column_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[Tx_Record_Column](l), err
}

// Tx_Record_Column_Future is a wrapper for a Tx_Record_Column promised by a client call.
type Tx_Record_Column_Future struct{ *capnp.Future }

func (f Tx_Record_Column_Future) Struct() (Tx_Record_Column, error) {
	p, err := f.Future.Ptr()
	return Tx_Record_Column(p.Struct()), err
}

type Tx_Record_PrimaryKey capnp.Struct

// Tx_Record_PrimaryKey_TypeID is the unique identifier for the type Tx_Record_PrimaryKey.
const Tx_Record_PrimaryKey_TypeID = 0x9722004316c0ea9f

func NewTx_Record_PrimaryKey(s *capnp.Segment) (Tx_Record_PrimaryKey, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Tx_Record_PrimaryKey(st), err
}

func NewRootTx_Record_PrimaryKey(s *capnp.Segment) (Tx_Record_PrimaryKey, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Tx_Record_PrimaryKey(st), err
}

func ReadRootTx_Record_PrimaryKey(msg *capnp.Message) (Tx_Record_PrimaryKey, error) {
	root, err := msg.Root()
	return Tx_Record_PrimaryKey(root.Struct()), err
}

func (s Tx_Record_PrimaryKey) String() string {
	str, _ := text.Marshal(0x9722004316c0ea9f, capnp.Struct(s))
	return str
}

func (s Tx_Record_PrimaryKey) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Tx_Record_PrimaryKey) DecodeFromPtr(p capnp.Ptr) Tx_Record_PrimaryKey {
	return Tx_Record_PrimaryKey(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Tx_Record_PrimaryKey) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Tx_Record_PrimaryKey) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Tx_Record_PrimaryKey) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Tx_Record_PrimaryKey) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Tx_Record_PrimaryKey) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Tx_Record_PrimaryKey) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Tx_Record_PrimaryKey) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Tx_Record_PrimaryKey) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Tx_Record_PrimaryKey) Type() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Tx_Record_PrimaryKey) HasType() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Tx_Record_PrimaryKey) TypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Tx_Record_PrimaryKey) SetType(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// Tx_Record_PrimaryKey_List is a list of Tx_Record_PrimaryKey.
type Tx_Record_PrimaryKey_List = capnp.StructList[Tx_Record_PrimaryKey]

// NewTx_Record_PrimaryKey creates a new list of Tx_Record_PrimaryKey.
func NewTx_Record_PrimaryKey_List(s *capnp.Segment, sz int32) (Tx_Record_PrimaryKey_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Tx_Record_PrimaryKey](l), err
}

// Tx_Record_PrimaryKey_Future is a wrapper for a Tx_Record_PrimaryKey promised by a client call.
type Tx_Record_PrimaryKey_Future struct{ *capnp.Future }

func (f Tx_Record_PrimaryKey_Future) Struct() (Tx_Record_PrimaryKey, error) {
	p, err := f.Future.Ptr()
	return Tx_Record_PrimaryKey(p.Struct()), err
}

type Schema capnp.Struct

// Schema_TypeID is the unique identifier for the type Schema.
const Schema_TypeID = 0xb2c63295c6bcc643

func NewSchema(s *capnp.Segment) (Schema, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Schema(st), err
}

func NewRootSchema(s *capnp.Segment) (Schema, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Schema(st), err
}

func ReadRootSchema(msg *capnp.Message) (Schema, error) {
	root, err := msg.Root()
	return Schema(root.Struct()), err
}

func (s Schema) String() string {
	str, _ := text.Marshal(0xb2c63295c6bcc643, capnp.Struct(s))
	return str
}

func (s Schema) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Schema) DecodeFromPtr(p capnp.Ptr) Schema {
	return Schema(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Schema) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Schema) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Schema) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Schema) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Schema) Columns() (Schema_Column_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Schema_Column_List(p.List()), err
}

func (s Schema) HasColumns() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Schema) SetColumns(v Schema_Column_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewColumns sets the columns field to a newly
// allocated Schema_Column_List, preferring placement in s's segment.
func (s Schema) NewColumns(n int32) (Schema_Column_List, error) {
	l, err := NewSchema_Column_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Schema_Column_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Schema_List is a list of Schema.
type Schema_List = capnp.StructList[Schema]

// NewSchema creates a new list of Schema.
func NewSchema_List(s *capnp.Segment, sz int32) (Schema_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Schema](l), err
}

// Schema_Future is a wrapper for a Schema promised by a client call.
type Schema_Future struct{ *capnp.Future }

func (f Schema_Future) Struct() (Schema, error) {
	p, err := f.Future.Ptr()
	return Schema(p.Struct()), err
}

type Schema_Column capnp.Struct

// Schema_Column_TypeID is the unique identifier for the type Schema_Column.
const Schema_Column_TypeID = 0xc6ee33dc50be1a5a

func NewSchema_Column(s *capnp.Segment) (Schema_Column, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Schema_Column(st), err
}

func NewRootSchema_Column(s *capnp.Segment) (Schema_Column, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Schema_Column(st), err
}

func ReadRootSchema_Column(msg *capnp.Message) (Schema_Column, error) {
	root, err := msg.Root()
	return Schema_Column(root.Struct()), err
}

func (s Schema_Column) String() string {
	str, _ := text.Marshal(0xc6ee33dc50be1a5a, capnp.Struct(s))
	return str
}

func (s Schema_Column) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Schema_Column) DecodeFromPtr(p capnp.Ptr) Schema_Column {
	return Schema_Column(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Schema_Column) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Schema_Column) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Schema_Column) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Schema_Column) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Schema_Column) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Schema_Column) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Schema_Column) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Schema_Column) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Schema_Column) Type() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Schema_Column) HasType() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Schema_Column) TypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Schema_Column) SetType(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Schema_Column) IsNullable() bool {
	return capnp.Struct(s).Bit(0)
}

func (s Schema_Column) SetIsNullable(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s Schema_Column) IsPartOfPrimaryKey() bool {
	return capnp.Struct(s).Bit(1)
}

func (s Schema_Column) SetIsPartOfPrimaryKey(v bool) {
	capnp.Struct(s).SetBit(1, v)
}

// Schema_Column_List is a list of Schema_Column.
type Schema_Column_List = capnp.StructList[Schema_Column]

// NewSchema_Column creates a new list of Schema_Column.
func NewSchema_Column_List(s *capnp.Segment, sz int32) (Schema_Column_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[Schema_Column](l), err
}

// Schema_Column_Future is a wrapper for a Schema_Column promised by a client call.
type Schema_Column_Future struct{ *capnp.Future }

func (f Schema_Column_Future) Struct() (Schema_Column, error) {
	p, err := f.Future.Ptr()
	return Schema_Column(p.Struct()), err
}

type DealInfo capnp.Struct

// DealInfo_TypeID is the unique identifier for the type DealInfo.
const DealInfo_TypeID = 0xc69bf7c475bb2886

func NewDealInfo(s *capnp.Segment) (DealInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return DealInfo(st), err
}

func NewRootDealInfo(s *capnp.Segment) (DealInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return DealInfo(st), err
}

func ReadRootDealInfo(msg *capnp.Message) (DealInfo, error) {
	root, err := msg.Root()
	return DealInfo(root.Struct()), err
}

func (s DealInfo) String() string {
	str, _ := text.Marshal(0xc69bf7c475bb2886, capnp.Struct(s))
	return str
}

func (s DealInfo) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DealInfo) DecodeFromPtr(p capnp.Ptr) DealInfo {
	return DealInfo(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DealInfo) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DealInfo) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DealInfo) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DealInfo) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DealInfo) Cid() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s DealInfo) HasCid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s DealInfo) CidBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s DealInfo) SetCid(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s DealInfo) Size() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s DealInfo) SetSize(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s DealInfo) Created() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s DealInfo) HasCreated() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s DealInfo) CreatedBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s DealInfo) SetCreated(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s DealInfo) Archived() bool {
	return capnp.Struct(s).Bit(32)
}

func (s DealInfo) SetArchived(v bool) {
	capnp.Struct(s).SetBit(32, v)
}

// DealInfo_List is a list of DealInfo.
type DealInfo_List = capnp.StructList[DealInfo]

// NewDealInfo creates a new list of DealInfo.
func NewDealInfo_List(s *capnp.Segment, sz int32) (DealInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[DealInfo](l), err
}

// DealInfo_Future is a wrapper for a DealInfo promised by a client call.
type DealInfo_Future struct{ *capnp.Future }

func (f DealInfo_Future) Struct() (DealInfo, error) {
	p, err := f.Future.Ptr()
	return DealInfo(p.Struct()), err
}

const schema_8c49da2775b6e7db = "x\xda\x8c\x94Oh\x1c\xe5\x1b\xc7\xbf\xdf\xf7\x9d\xd9l" +
	" \xf9\xa5\xc3\xec\xcf?\xa5\x12[\x83\xad\xa1I\x9b\xc4" +
	"\xd3\x82l1\x15\x12M\xeb>\xdb\x82\x18\x14\x9d\xeeN" +
	"\xdc\xd1\x9d\xdduw\xb6m\xbc\xd4\x93\x88xT\xc4?" +
	"\xc5\x1e\x14Z\xb0\xf8\x07\xf1\xa2H\x95\xb27\xf1\xe4\xc1" +
	"Z\x10\x0fZ\xeaA\xf4 b\x10F\xde\xdd\xec\xec\x18" +
	"\xda\xd0\xe3<\xf3\xcc<\xdf\xcf\xf7\xf9\xbe\xef\xc1\xdd\xea" +
	"\x9057\xfe\xad\x86\x92\xfdv\xe6\xc7w\x7f\xbdt\xdb" +
	"\xe2\x9e7\x9c{\x19/m|\xba\xf2\xcb\xd4\xc6E\xd8" +
	"j\x04X\xf8\x86\xaf\xd0\xfd\x99#\x80\xfb\x13O!\xf5" +
	"\xde\x99d\xfc\xd4\xdf\x9d\xbbF\x9et\xaf\xc3\xce\x98\xe6" +
	"\x07\xd4<\xdd#j/\xb0\xe0\xab\xc7\x08\xc6\x8b\xdd/" +
	"\xba\xaf\xcfw?\x81\xb3\x8b\xf1\x0f\xd7>\xeb\xec\xbd\xb2" +
	"\xfc*l\xf3\xbf\x85\xef\xf5N\xba\xd7\xf5\xed\x80\xfb\x87" +
	".\x80\xf1K\xfb>\xef\\\xfe\xeb\xed.d\x17\xd3\xdd" +
	"=!\xbb\xadi\xbas\x96\x112c]\x03\xe3\xd5\x9d" +
	"_\x16\xaf.\xfc\xd6\x85\xdc\xc3\xd4\xa0~\xb7m\x97\xe8" +
	"\xdei\x9b\xee\xff\xdb\xa6\xfb\x9f\x97\x1f\xffz\xe5\xbb\xdf" +
	"\xaf\xe0\xbf\x8c\xda4\xffi?Kw\xd4\x10\xb8v\xe6" +
	"C\xa4\xb0\xb6\x08\xe9\xd9p6\xb3\xe1^\xc8\x18\xd5\x1f" +
	"gNa&n>\xf7\xcc\x81\xb2\xd7\xac\xdb\xcd\x03\x15" +
	"\x7f-\xa8\x07Q\xd0\xa8\xb7gM\xa9\x99?~z\xb6" +
	"\xe4\x97\x1b\xad\xcal\xb1\x15\x84^k\xfd\x11\x7f\x1d(" +
	"\x92\x92\xd5\x16`\x11p\xee\x9b\x06dJS\x0e*:" +
	"d\x8e\xa68c\x8a\xfb4\xe5~\xc5\x89\xba\x17\xfa\x1c" +
	"\x83\xe2\x188\x11\xad7\x93\x87d\xb8\xbe\xd9\xf0\xc9\xde" +
	"t\xc92m\xc1h>\xd9\xb8\xbdZXl\xd4:a" +
	"=\x1e\x08\x84\xf6\xd7\xe5\x8eD\xdd\x9by@^\xd3\x94" +
	"s)ugK\x80\xbc\xa3)\xe7\x15\x1d\xa5rT\x80" +
	"\xf3\xbe\xe9<\xa7)\x1f(:Z\xe7\xa8\x01\xe7\xc2<" +
	" \xefi\xcaG\x8a\x8ee\xe5h\x01\xce\xc5\x07\x019" +
	"\xaf)\x97\x15\x1d\xdb\xce\xd1\x06\x9c\xafV\x01\xb9\xa4)" +
	"W\x15\x0b^\xd9\x80$\x98Q\x10\xfa\xed\xc8\x0b\xc1\xe6" +
	"\xa0Vh\x97\xab~\xe8\x0d\x1e'#\xefD-\xf1\xe5" +
	"L\xb9\xc7\xd4\xe6\xff\xc0\xa2&w\x0c\xe1AS\x8c\x9b" +
	")\xda\xa4k\xe0\xca\xa0g;s\x8f\x95\xab\xbe\x0e=" +
	"\xb1\x98\x8a\xa2\xc3\xfc\xa6\x9db%\x0e\x8e\x1b\xda\xac\xa6" +
	"L\xa9\x1b\x08K\xbe\xbd\x95\xa1\x87}\xaf6\xb1\\_" +
	"k\x98\x04\xedH&x{\x00yBS\xaa\x8a\x83\x15" +
	"\xf9&@OkJ\xcd\xac\x88\xfd\x15\x05FJES" +
	"\x9afEw\xf7W\x14>\x0cHMSN+\x8e\x94" +
	"\x83J\x92\xb4v\xf0\x82\xcf,\x14\xb3\xc6\xd1\x96\xefE" +
	"~\xf22\xf6Z\xe5jp\xd2\xaf\xc0\x08\x87\"S\xda" +
	"\xad\x9b\x19\x16z\xb3={X\xdf\x020=\x04pn" +
	"D\xc0\xcd\x8c\x05&$UM\x89\x0c\x00\xfb\x00\xcf\xbf" +
	"\x05H\xa4)/n{V\x82\xf6\xd1N\xad\xe6\x9d\x80" +
	"\xae\xf9\x89\xe4\xa0]\xf4Z\xd1\xa3k\x1c\xc4\xdf\xe4\xe1" +
	"\x96x\x86G{\xb11a\x96j\x90\xc6\x12\xa4\x87\x8c" +
	"\xfaC\x9a\xb2\x92BZ6\xc5\xc3\x9aRL\x9d\x9b#" +
	"\xe6\x88,i\xca\xf1\xed\xe4O\x9e\xf4j\x1d\x9f\xe3P" +
	"\x1cOIS[\xa5\x15\xfa\xdaz\xb9\x1c\xde\xd5\xcc\x17" +
	"J\x9b7\xc1\xf0\xde)\x0d\xaf\x98\x81\xc09\x13\x90\xfd" +
	"\x9a\xb2\xa4\x18\x97\x1ba\x18D+\xc7\xc0\xa3\x1c\x85\xe2" +
	"(x\xa6\xd5\xfbK*\xbf\xc9\x8c~~\xff\x0d\x00\x00" +
	"\xff\xff\x99\xa7\x90T"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_8c49da2775b6e7db,
		Nodes: []uint64{
			0x9722004316c0ea9f,
			0xadfa24e64cb4fa48,
			0xb2c63295c6bcc643,
			0xc69bf7c475bb2886,
			0xc6ee33dc50be1a5a,
			0xdaf0d54cc25988fc,
			0xe9135d071d75f95f,
		},
		Compressed: true,
	})
}
